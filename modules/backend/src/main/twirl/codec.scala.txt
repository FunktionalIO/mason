@import mason.Module
@(project: mason.Project)
package @{project.packageName}

object codec:
    object json:
        import io.circe.*
        import io.circe.generic.semiauto.deriveCodec
        import io.github.iltotore.iron.circe.given
        import sttp.tapir.Schema
        import sttp.tapir.codec.iron.{*, given}

        given Codec[Greeting] = deriveCodec[Greeting]
        given Schema[Greeting] = Schema.derived
        
        // Define your own JSON codecs here
    end json
    @if(project.hasModule(Module.DbSkunk)) {
    object db:
        import skunk.*
        import skunk.codec.all.*

        val name: Codec[Name]        = text.eimap(Name.either)(identity)
        val message: Codec[Message]    = text.eimap(Message.either)(identity)
        val hash: Codec[Hash]      = int4.eimap(Hash.either)(identity)
        val Comment: Codec[Greeting] =
            (message *: name *: hash).imap(Greeting.apply)(g =>
                (g.message, g.to, g.hash)
            )
    end db
    }
    @if(project.hasModule(Module.DbDoobie)) {
    object db:
        import cats.Show
        import doobie.*
        import io.github.iltotore.iron.*

        inline given [A, C](using inline meta: Meta[A])(using Constraint[A, C], Show[A]): Meta[A :| C] =
            meta.tiemap[A :| C](_.refineEither)(identity)

        inline given [T](using m: RefinedTypeOps.Mirror[T], ev: Meta[m.IronType]): Meta[T] =
            ev.asInstanceOf[Meta[T]]
    end db
    }