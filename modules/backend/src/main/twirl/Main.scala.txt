@import mason.Module
@(project: mason.Project)
package @{project.packageName}

import cats.effect.IO
import @{project.packageName}.build.BuildInfo
import pillars.AppInfo
import pillars.Pillars
import pillars.Run
import pillars.logger
import pillars.server
@for(module <- project.modules) {import @{module.packageName}.*
}


object Main extends pillars.IOApp(@{project.modules.map(_.support).mkString(", ")}):
    def infos: AppInfo = BuildInfo.toAppInfo

    def run: Run[IO, IO[Unit]] =
        for
            config  <- Pillars[IO].readConfig[Config]
            _       <- logger.info(s"🏛️ Welcome to ${config.name}!")
@if(project.hasModule(Module.DBMigration)) {
            _       <- dbMigration.migrate("classpath:db-migrations")
}
            metrics <- Metrics.setup(Pillars[IO].observability)
            _       <- server.start(homeController(metrics))
        yield ()
        end for
    end run
end Main
